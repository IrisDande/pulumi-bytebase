// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace bytebaseDatabase.bytebase
{
    [bytebaseResourceType("bytebase:index:bytebaseIndex")]
    public partial class bytebaseIndex : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The dimensions of the vectors in the index. Defaults to 1536.
        /// </summary>
        [Output("dimension")]
        public Output<int?> Dimension { get; private set; } = null!;

        /// <summary>
        /// The URL address where the index is hosted.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The metric used to compute the distance between vectors.
        /// </summary>
        [Output("metric")]
        public Output<bytebaseDatabase.bytebase.IndexMetric> Metric { get; private set; } = null!;

        /// <summary>
        /// The name of the bytebase index.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Describe how the index should be deployed.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.bytebaseSpec> Spec { get; private set; } = null!;


        /// <summary>
        /// Create a bytebaseIndex resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public bytebaseIndex(string name, bytebaseIndexArgs args, CustomResourceOptions? options = null)
            : base("bytebase:index:bytebaseIndex", name, args ?? new bytebaseIndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private bytebaseIndex(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("bytebase:index:bytebaseIndex", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/bytebase-io/pulumi-bytebase",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing bytebaseIndex resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static bytebaseIndex Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new bytebaseIndex(name, id, options);
        }
    }

    public sealed class bytebaseIndexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The dimensions of the vectors in the index. Defaults to 1536.
        /// </summary>
        [Input("dimension")]
        public Input<int>? Dimension { get; set; }

        /// <summary>
        /// The metric used to compute the distance between vectors.
        /// </summary>
        [Input("metric", required: true)]
        public Input<bytebaseDatabase.bytebase.IndexMetric> Metric { get; set; } = null!;

        /// <summary>
        /// The name of the bytebase index.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Describe how the index should be deployed.
        /// </summary>
        [Input("spec", required: true)]
        public Input<Inputs.bytebaseSpecArgs> Spec { get; set; } = null!;

        public bytebaseIndexArgs()
        {
        }
        public static new bytebaseIndexArgs Empty => new bytebaseIndexArgs();
    }
}

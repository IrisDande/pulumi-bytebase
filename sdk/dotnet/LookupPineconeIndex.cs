// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace bytebaseDatabase.bytebase
{
    public static class LookupbytebaseIndex
    {
        public static Task<LookupbytebaseIndexResult> InvokeAsync(LookupbytebaseIndexArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<LookupbytebaseIndexResult>("bytebase:index:lookupbytebaseIndex", args ?? new LookupbytebaseIndexArgs(), options.WithDefaults());

        public static Output<LookupbytebaseIndexResult> Invoke(LookupbytebaseIndexInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<LookupbytebaseIndexResult>("bytebase:index:lookupbytebaseIndex", args ?? new LookupbytebaseIndexInvokeArgs(), options.WithDefaults());
    }


    public sealed class LookupbytebaseIndexArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bytebase index.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public LookupbytebaseIndexArgs()
        {
        }
        public static new LookupbytebaseIndexArgs Empty => new LookupbytebaseIndexArgs();
    }

    public sealed class LookupbytebaseIndexInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bytebase index.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public LookupbytebaseIndexInvokeArgs()
        {
        }
        public static new LookupbytebaseIndexInvokeArgs Empty => new LookupbytebaseIndexInvokeArgs();
    }


    [OutputType]
    public sealed class LookupbytebaseIndexResult
    {
        /// <summary>
        /// The dimensions of the vectors in the index. Defaults to 1536.
        /// </summary>
        public readonly int? Dimension;
        /// <summary>
        /// The host of the index.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The metric used to compute the distance between vectors.
        /// </summary>
        public readonly bytebaseDatabase.bytebase.IndexMetric Metric;
        /// <summary>
        /// The name of the bytebase index.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Describe how the index should be deployed.
        /// </summary>
        public readonly Outputs.bytebaseSpec Spec;
        /// <summary>
        /// The status of the index.
        /// </summary>
        public readonly bool Status;

        [OutputConstructor]
        private LookupbytebaseIndexResult(
            int? dimension,

            string host,

            bytebaseDatabase.bytebase.IndexMetric metric,

            string name,

            Outputs.bytebaseSpec spec,

            bool status)
        {
            Dimension = dimension;
            Host = host;
            Metric = metric;
            Name = name;
            Spec = spec;
            Status = status;
        }
    }
}

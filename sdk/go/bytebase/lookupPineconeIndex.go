// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-bytebase/sdk/go/bytebase/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupbytebaseIndex(ctx *pulumi.Context, args *LookupbytebaseIndexArgs, opts ...pulumi.InvokeOption) (*LookupbytebaseIndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupbytebaseIndexResult
	err := ctx.Invoke("bytebase:index:lookupbytebaseIndex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupbytebaseIndexArgs struct {
	// The name of the bytebase index.
	Name string `pulumi:"name"`
}

type LookupbytebaseIndexResult struct {
	// The dimensions of the vectors in the index. Defaults to 1536.
	Dimension *int `pulumi:"dimension"`
	// The host of the index.
	Host string `pulumi:"host"`
	// The metric used to compute the distance between vectors.
	Metric IndexMetric `pulumi:"metric"`
	// The name of the bytebase index.
	Name string `pulumi:"name"`
	// Describe how the index should be deployed.
	Spec bytebaseSpec `pulumi:"spec"`
	// The status of the index.
	Status bool `pulumi:"status"`
}

func LookupbytebaseIndexOutput(ctx *pulumi.Context, args LookupbytebaseIndexOutputArgs, opts ...pulumi.InvokeOption) LookupbytebaseIndexResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupbytebaseIndexResult, error) {
			args := v.(LookupbytebaseIndexArgs)
			r, err := LookupbytebaseIndex(ctx, &args, opts...)
			var s LookupbytebaseIndexResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupbytebaseIndexResultOutput)
}

type LookupbytebaseIndexOutputArgs struct {
	// The name of the bytebase index.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupbytebaseIndexOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupbytebaseIndexArgs)(nil)).Elem()
}

type LookupbytebaseIndexResultOutput struct{ *pulumi.OutputState }

func (LookupbytebaseIndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupbytebaseIndexResult)(nil)).Elem()
}

func (o LookupbytebaseIndexResultOutput) ToLookupbytebaseIndexResultOutput() LookupbytebaseIndexResultOutput {
	return o
}

func (o LookupbytebaseIndexResultOutput) ToLookupbytebaseIndexResultOutputWithContext(ctx context.Context) LookupbytebaseIndexResultOutput {
	return o
}

// The dimensions of the vectors in the index. Defaults to 1536.
func (o LookupbytebaseIndexResultOutput) Dimension() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupbytebaseIndexResult) *int { return v.Dimension }).(pulumi.IntPtrOutput)
}

// The host of the index.
func (o LookupbytebaseIndexResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupbytebaseIndexResult) string { return v.Host }).(pulumi.StringOutput)
}

// The metric used to compute the distance between vectors.
func (o LookupbytebaseIndexResultOutput) Metric() IndexMetricOutput {
	return o.ApplyT(func(v LookupbytebaseIndexResult) IndexMetric { return v.Metric }).(IndexMetricOutput)
}

// The name of the bytebase index.
func (o LookupbytebaseIndexResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupbytebaseIndexResult) string { return v.Name }).(pulumi.StringOutput)
}

// Describe how the index should be deployed.
func (o LookupbytebaseIndexResultOutput) Spec() bytebaseSpecOutput {
	return o.ApplyT(func(v LookupbytebaseIndexResult) bytebaseSpec { return v.Spec }).(bytebaseSpecOutput)
}

// The status of the index.
func (o LookupbytebaseIndexResultOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupbytebaseIndexResult) bool { return v.Status }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupbytebaseIndexResultOutput{})
}

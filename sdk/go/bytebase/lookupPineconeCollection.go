// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-bytebase/sdk/go/bytebase/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The result of a get operation on a bytebase collection.
func LookupbytebaseCollection(ctx *pulumi.Context, args *LookupbytebaseCollectionArgs, opts ...pulumi.InvokeOption) (*LookupbytebaseCollectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupbytebaseCollectionResult
	err := ctx.Invoke("bytebase:index:lookupbytebaseCollection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupbytebaseCollectionArgs struct {
	// The name of the bytebase collection.
	Name string `pulumi:"name"`
}

// The result of a get operation on a bytebase collection.
type LookupbytebaseCollectionResult struct {
	// The dimension of the vectors stored in each record held in the collection.
	Dimension int `pulumi:"dimension"`
	// The environment where the collection is hosted.
	Environment string `pulumi:"environment"`
	// The name of the collection to be created.
	Name string `pulumi:"name"`
	// The size of the collection in bytes.
	Size int `pulumi:"size"`
	// The name of the index to be used as the source for the collection.
	Source string `pulumi:"source"`
	// The number of records stored in the collection.
	VectorCount int `pulumi:"vectorCount"`
}

func LookupbytebaseCollectionOutput(ctx *pulumi.Context, args LookupbytebaseCollectionOutputArgs, opts ...pulumi.InvokeOption) LookupbytebaseCollectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupbytebaseCollectionResult, error) {
			args := v.(LookupbytebaseCollectionArgs)
			r, err := LookupbytebaseCollection(ctx, &args, opts...)
			var s LookupbytebaseCollectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupbytebaseCollectionResultOutput)
}

type LookupbytebaseCollectionOutputArgs struct {
	// The name of the bytebase collection.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupbytebaseCollectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupbytebaseCollectionArgs)(nil)).Elem()
}

// The result of a get operation on a bytebase collection.
type LookupbytebaseCollectionResultOutput struct{ *pulumi.OutputState }

func (LookupbytebaseCollectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupbytebaseCollectionResult)(nil)).Elem()
}

func (o LookupbytebaseCollectionResultOutput) ToLookupbytebaseCollectionResultOutput() LookupbytebaseCollectionResultOutput {
	return o
}

func (o LookupbytebaseCollectionResultOutput) ToLookupbytebaseCollectionResultOutputWithContext(ctx context.Context) LookupbytebaseCollectionResultOutput {
	return o
}

// The dimension of the vectors stored in each record held in the collection.
func (o LookupbytebaseCollectionResultOutput) Dimension() pulumi.IntOutput {
	return o.ApplyT(func(v LookupbytebaseCollectionResult) int { return v.Dimension }).(pulumi.IntOutput)
}

// The environment where the collection is hosted.
func (o LookupbytebaseCollectionResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupbytebaseCollectionResult) string { return v.Environment }).(pulumi.StringOutput)
}

// The name of the collection to be created.
func (o LookupbytebaseCollectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupbytebaseCollectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The size of the collection in bytes.
func (o LookupbytebaseCollectionResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupbytebaseCollectionResult) int { return v.Size }).(pulumi.IntOutput)
}

// The name of the index to be used as the source for the collection.
func (o LookupbytebaseCollectionResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LookupbytebaseCollectionResult) string { return v.Source }).(pulumi.StringOutput)
}

// The number of records stored in the collection.
func (o LookupbytebaseCollectionResultOutput) VectorCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupbytebaseCollectionResult) int { return v.VectorCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupbytebaseCollectionResultOutput{})
}

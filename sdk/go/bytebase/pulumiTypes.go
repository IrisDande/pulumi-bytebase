// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bytebase

import (
	"context"
	"reflect"

	"github.com/bytebase-io/pulumi-bytebase/sdk/go/bytebase/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type MetaDataConfig struct {
	//  Indexed By default, all metadata is indexed; to change this behavior, use this property to specify an array of metadata fields which should be indexed.
	Indexed []string `pulumi:"indexed"`
}

// MetaDataConfigInput is an input type that accepts MetaDataConfigArgs and MetaDataConfigOutput values.
// You can construct a concrete instance of `MetaDataConfigInput` via:
//
//	MetaDataConfigArgs{...}
type MetaDataConfigInput interface {
	pulumi.Input

	ToMetaDataConfigOutput() MetaDataConfigOutput
	ToMetaDataConfigOutputWithContext(context.Context) MetaDataConfigOutput
}

type MetaDataConfigArgs struct {
	//  Indexed By default, all metadata is indexed; to change this behavior, use this property to specify an array of metadata fields which should be indexed.
	Indexed pulumi.StringArrayInput `pulumi:"indexed"`
}

func (MetaDataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaDataConfig)(nil)).Elem()
}

func (i MetaDataConfigArgs) ToMetaDataConfigOutput() MetaDataConfigOutput {
	return i.ToMetaDataConfigOutputWithContext(context.Background())
}

func (i MetaDataConfigArgs) ToMetaDataConfigOutputWithContext(ctx context.Context) MetaDataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetaDataConfigOutput)
}

func (i MetaDataConfigArgs) ToMetaDataConfigPtrOutput() MetaDataConfigPtrOutput {
	return i.ToMetaDataConfigPtrOutputWithContext(context.Background())
}

func (i MetaDataConfigArgs) ToMetaDataConfigPtrOutputWithContext(ctx context.Context) MetaDataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetaDataConfigOutput).ToMetaDataConfigPtrOutputWithContext(ctx)
}

// MetaDataConfigPtrInput is an input type that accepts MetaDataConfigArgs, MetaDataConfigPtr and MetaDataConfigPtrOutput values.
// You can construct a concrete instance of `MetaDataConfigPtrInput` via:
//
//	        MetaDataConfigArgs{...}
//
//	or:
//
//	        nil
type MetaDataConfigPtrInput interface {
	pulumi.Input

	ToMetaDataConfigPtrOutput() MetaDataConfigPtrOutput
	ToMetaDataConfigPtrOutputWithContext(context.Context) MetaDataConfigPtrOutput
}

type metaDataConfigPtrType MetaDataConfigArgs

func MetaDataConfigPtr(v *MetaDataConfigArgs) MetaDataConfigPtrInput {
	return (*metaDataConfigPtrType)(v)
}

func (*metaDataConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetaDataConfig)(nil)).Elem()
}

func (i *metaDataConfigPtrType) ToMetaDataConfigPtrOutput() MetaDataConfigPtrOutput {
	return i.ToMetaDataConfigPtrOutputWithContext(context.Background())
}

func (i *metaDataConfigPtrType) ToMetaDataConfigPtrOutputWithContext(ctx context.Context) MetaDataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetaDataConfigPtrOutput)
}

type MetaDataConfigOutput struct{ *pulumi.OutputState }

func (MetaDataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetaDataConfig)(nil)).Elem()
}

func (o MetaDataConfigOutput) ToMetaDataConfigOutput() MetaDataConfigOutput {
	return o
}

func (o MetaDataConfigOutput) ToMetaDataConfigOutputWithContext(ctx context.Context) MetaDataConfigOutput {
	return o
}

func (o MetaDataConfigOutput) ToMetaDataConfigPtrOutput() MetaDataConfigPtrOutput {
	return o.ToMetaDataConfigPtrOutputWithContext(context.Background())
}

func (o MetaDataConfigOutput) ToMetaDataConfigPtrOutputWithContext(ctx context.Context) MetaDataConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetaDataConfig) *MetaDataConfig {
		return &v
	}).(MetaDataConfigPtrOutput)
}

// Indexed By default, all metadata is indexed; to change this behavior, use this property to specify an array of metadata fields which should be indexed.
func (o MetaDataConfigOutput) Indexed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetaDataConfig) []string { return v.Indexed }).(pulumi.StringArrayOutput)
}

type MetaDataConfigPtrOutput struct{ *pulumi.OutputState }

func (MetaDataConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetaDataConfig)(nil)).Elem()
}

func (o MetaDataConfigPtrOutput) ToMetaDataConfigPtrOutput() MetaDataConfigPtrOutput {
	return o
}

func (o MetaDataConfigPtrOutput) ToMetaDataConfigPtrOutputWithContext(ctx context.Context) MetaDataConfigPtrOutput {
	return o
}

func (o MetaDataConfigPtrOutput) Elem() MetaDataConfigOutput {
	return o.ApplyT(func(v *MetaDataConfig) MetaDataConfig {
		if v != nil {
			return *v
		}
		var ret MetaDataConfig
		return ret
	}).(MetaDataConfigOutput)
}

// Indexed By default, all metadata is indexed; to change this behavior, use this property to specify an array of metadata fields which should be indexed.
func (o MetaDataConfigPtrOutput) Indexed() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetaDataConfig) []string {
		if v == nil {
			return nil
		}
		return v.Indexed
	}).(pulumi.StringArrayOutput)
}

type bytebasePodSpec struct {
	// The environment where the index is hosted.
	Environment string `pulumi:"environment"`
	// Configuration for the behavior of bytebase's internal metadata index.
	MetaDataConfig *MetaDataConfig `pulumi:"metaDataConfig"`
	// The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
	PodType string `pulumi:"podType"`
	// The number of pods to be used in the index. This should be equal to `shards` x `replicas`.
	Pods *int `pulumi:"pods"`
	// The number of replicas. Replicas duplicate your index. They provide higher availability and throughput. Replicas can be scaled up or down as your needs change.
	Replicas int `pulumi:"replicas"`
	// The number of shards. Shards split your data across multiple pods so you can fit more data into an index.
	Shards *int `pulumi:"shards"`
	// The name of the collection to be used as the source for the index.
	SourceCollection *string `pulumi:"sourceCollection"`
}

// bytebasePodSpecInput is an input type that accepts bytebasePodSpecArgs and bytebasePodSpecOutput values.
// You can construct a concrete instance of `bytebasePodSpecInput` via:
//
//	bytebasePodSpecArgs{...}
type bytebasePodSpecInput interface {
	pulumi.Input

	TobytebasePodSpecOutput() bytebasePodSpecOutput
	TobytebasePodSpecOutputWithContext(context.Context) bytebasePodSpecOutput
}

type bytebasePodSpecArgs struct {
	// The environment where the index is hosted.
	Environment pulumi.StringInput `pulumi:"environment"`
	// Configuration for the behavior of bytebase's internal metadata index.
	MetaDataConfig MetaDataConfigPtrInput `pulumi:"metaDataConfig"`
	// The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
	PodType pulumi.StringInput `pulumi:"podType"`
	// The number of pods to be used in the index. This should be equal to `shards` x `replicas`.
	Pods pulumi.IntPtrInput `pulumi:"pods"`
	// The number of replicas. Replicas duplicate your index. They provide higher availability and throughput. Replicas can be scaled up or down as your needs change.
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// The number of shards. Shards split your data across multiple pods so you can fit more data into an index.
	Shards pulumi.IntPtrInput `pulumi:"shards"`
	// The name of the collection to be used as the source for the index.
	SourceCollection pulumi.StringPtrInput `pulumi:"sourceCollection"`
}

func (bytebasePodSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bytebasePodSpec)(nil)).Elem()
}

func (i bytebasePodSpecArgs) TobytebasePodSpecOutput() bytebasePodSpecOutput {
	return i.TobytebasePodSpecOutputWithContext(context.Background())
}

func (i bytebasePodSpecArgs) TobytebasePodSpecOutputWithContext(ctx context.Context) bytebasePodSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(bytebasePodSpecOutput)
}

func (i bytebasePodSpecArgs) TobytebasePodSpecPtrOutput() bytebasePodSpecPtrOutput {
	return i.TobytebasePodSpecPtrOutputWithContext(context.Background())
}

func (i bytebasePodSpecArgs) TobytebasePodSpecPtrOutputWithContext(ctx context.Context) bytebasePodSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(bytebasePodSpecOutput).TobytebasePodSpecPtrOutputWithContext(ctx)
}

// bytebasePodSpecPtrInput is an input type that accepts bytebasePodSpecArgs, bytebasePodSpecPtr and bytebasePodSpecPtrOutput values.
// You can construct a concrete instance of `bytebasePodSpecPtrInput` via:
//
//	        bytebasePodSpecArgs{...}
//
//	or:
//
//	        nil
type bytebasePodSpecPtrInput interface {
	pulumi.Input

	TobytebasePodSpecPtrOutput() bytebasePodSpecPtrOutput
	TobytebasePodSpecPtrOutputWithContext(context.Context) bytebasePodSpecPtrOutput
}

type bytebasePodSpecPtrType bytebasePodSpecArgs

func bytebasePodSpecPtr(v *bytebasePodSpecArgs) bytebasePodSpecPtrInput {
	return (*bytebasePodSpecPtrType)(v)
}

func (*bytebasePodSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**bytebasePodSpec)(nil)).Elem()
}

func (i *bytebasePodSpecPtrType) TobytebasePodSpecPtrOutput() bytebasePodSpecPtrOutput {
	return i.TobytebasePodSpecPtrOutputWithContext(context.Background())
}

func (i *bytebasePodSpecPtrType) TobytebasePodSpecPtrOutputWithContext(ctx context.Context) bytebasePodSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(bytebasePodSpecPtrOutput)
}

type bytebasePodSpecOutput struct{ *pulumi.OutputState }

func (bytebasePodSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*bytebasePodSpec)(nil)).Elem()
}

func (o bytebasePodSpecOutput) TobytebasePodSpecOutput() bytebasePodSpecOutput {
	return o
}

func (o bytebasePodSpecOutput) TobytebasePodSpecOutputWithContext(ctx context.Context) bytebasePodSpecOutput {
	return o
}

func (o bytebasePodSpecOutput) TobytebasePodSpecPtrOutput() bytebasePodSpecPtrOutput {
	return o.TobytebasePodSpecPtrOutputWithContext(context.Background())
}

func (o bytebasePodSpecOutput) TobytebasePodSpecPtrOutputWithContext(ctx context.Context) bytebasePodSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v bytebasePodSpec) *bytebasePodSpec {
		return &v
	}).(bytebasePodSpecPtrOutput)
}

// The environment where the index is hosted.
func (o bytebasePodSpecOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v bytebasePodSpec) string { return v.Environment }).(pulumi.StringOutput)
}

// Configuration for the behavior of bytebase's internal metadata index.
func (o bytebasePodSpecOutput) MetaDataConfig() MetaDataConfigPtrOutput {
	return o.ApplyT(func(v bytebasePodSpec) *MetaDataConfig { return v.MetaDataConfig }).(MetaDataConfigPtrOutput)
}

// The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
func (o bytebasePodSpecOutput) PodType() pulumi.StringOutput {
	return o.ApplyT(func(v bytebasePodSpec) string { return v.PodType }).(pulumi.StringOutput)
}

// The number of pods to be used in the index. This should be equal to `shards` x `replicas`.
func (o bytebasePodSpecOutput) Pods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v bytebasePodSpec) *int { return v.Pods }).(pulumi.IntPtrOutput)
}

// The number of replicas. Replicas duplicate your index. They provide higher availability and throughput. Replicas can be scaled up or down as your needs change.
func (o bytebasePodSpecOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v bytebasePodSpec) int { return v.Replicas }).(pulumi.IntOutput)
}

// The number of shards. Shards split your data across multiple pods so you can fit more data into an index.
func (o bytebasePodSpecOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v bytebasePodSpec) *int { return v.Shards }).(pulumi.IntPtrOutput)
}

// The name of the collection to be used as the source for the index.
func (o bytebasePodSpecOutput) SourceCollection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v bytebasePodSpec) *string { return v.SourceCollection }).(pulumi.StringPtrOutput)
}

type bytebasePodSpecPtrOutput struct{ *pulumi.OutputState }

func (bytebasePodSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**bytebasePodSpec)(nil)).Elem()
}

func (o bytebasePodSpecPtrOutput) TobytebasePodSpecPtrOutput() bytebasePodSpecPtrOutput {
	return o
}

func (o bytebasePodSpecPtrOutput) TobytebasePodSpecPtrOutputWithContext(ctx context.Context) bytebasePodSpecPtrOutput {
	return o
}

func (o bytebasePodSpecPtrOutput) Elem() bytebasePodSpecOutput {
	return o.ApplyT(func(v *bytebasePodSpec) bytebasePodSpec {
		if v != nil {
			return *v
		}
		var ret bytebasePodSpec
		return ret
	}).(bytebasePodSpecOutput)
}

// The environment where the index is hosted.
func (o bytebasePodSpecPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *bytebasePodSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Environment
	}).(pulumi.StringPtrOutput)
}

// Configuration for the behavior of bytebase's internal metadata index.
func (o bytebasePodSpecPtrOutput) MetaDataConfig() MetaDataConfigPtrOutput {
	return o.ApplyT(func(v *bytebasePodSpec) *MetaDataConfig {
		if v == nil {
			return nil
		}
		return v.MetaDataConfig
	}).(MetaDataConfigPtrOutput)
}

// The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
func (o bytebasePodSpecPtrOutput) PodType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *bytebasePodSpec) *string {
		if v == nil {
			return nil
		}
		return &v.PodType
	}).(pulumi.StringPtrOutput)
}

// The number of pods to be used in the index. This should be equal to `shards` x `replicas`.
func (o bytebasePodSpecPtrOutput) Pods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *bytebasePodSpec) *int {
		if v == nil {
			return nil
		}
		return v.Pods
	}).(pulumi.IntPtrOutput)
}

// The number of replicas. Replicas duplicate your index. They provide higher availability and throughput. Replicas can be scaled up or down as your needs change.
func (o bytebasePodSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *bytebasePodSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The number of shards. Shards split your data across multiple pods so you can fit more data into an index.
func (o bytebasePodSpecPtrOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *bytebasePodSpec) *int {
		if v == nil {
			return nil
		}
		return v.Shards
	}).(pulumi.IntPtrOutput)
}

// The name of the collection to be used as the source for the index.
func (o bytebasePodSpecPtrOutput) SourceCollection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *bytebasePodSpec) *string {
		if v == nil {
			return nil
		}
		return v.SourceCollection
	}).(pulumi.StringPtrOutput)
}

type bytebaseServerlessSpec struct {
	// The public cloud where you would like your index hosted.
	Cloud ServerlessSpecCloud `pulumi:"cloud"`
	// The region where you would like your index to be created. Different cloud providers have different regions available.
	Region string `pulumi:"region"`
}

// bytebaseServerlessSpecInput is an input type that accepts bytebaseServerlessSpecArgs and bytebaseServerlessSpecOutput values.
// You can construct a concrete instance of `bytebaseServerlessSpecInput` via:
//
//	bytebaseServerlessSpecArgs{...}
type bytebaseServerlessSpecInput interface {
	pulumi.Input

	TobytebaseServerlessSpecOutput() bytebaseServerlessSpecOutput
	TobytebaseServerlessSpecOutputWithContext(context.Context) bytebaseServerlessSpecOutput
}

type bytebaseServerlessSpecArgs struct {
	// The public cloud where you would like your index hosted.
	Cloud ServerlessSpecCloudInput `pulumi:"cloud"`
	// The region where you would like your index to be created. Different cloud providers have different regions available.
	Region pulumi.StringInput `pulumi:"region"`
}

func (bytebaseServerlessSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bytebaseServerlessSpec)(nil)).Elem()
}

func (i bytebaseServerlessSpecArgs) TobytebaseServerlessSpecOutput() bytebaseServerlessSpecOutput {
	return i.TobytebaseServerlessSpecOutputWithContext(context.Background())
}

func (i bytebaseServerlessSpecArgs) TobytebaseServerlessSpecOutputWithContext(ctx context.Context) bytebaseServerlessSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(bytebaseServerlessSpecOutput)
}

func (i bytebaseServerlessSpecArgs) TobytebaseServerlessSpecPtrOutput() bytebaseServerlessSpecPtrOutput {
	return i.TobytebaseServerlessSpecPtrOutputWithContext(context.Background())
}

func (i bytebaseServerlessSpecArgs) TobytebaseServerlessSpecPtrOutputWithContext(ctx context.Context) bytebaseServerlessSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(bytebaseServerlessSpecOutput).TobytebaseServerlessSpecPtrOutputWithContext(ctx)
}

// bytebaseServerlessSpecPtrInput is an input type that accepts bytebaseServerlessSpecArgs, bytebaseServerlessSpecPtr and bytebaseServerlessSpecPtrOutput values.
// You can construct a concrete instance of `bytebaseServerlessSpecPtrInput` via:
//
//	        bytebaseServerlessSpecArgs{...}
//
//	or:
//
//	        nil
type bytebaseServerlessSpecPtrInput interface {
	pulumi.Input

	TobytebaseServerlessSpecPtrOutput() bytebaseServerlessSpecPtrOutput
	TobytebaseServerlessSpecPtrOutputWithContext(context.Context) bytebaseServerlessSpecPtrOutput
}

type bytebaseServerlessSpecPtrType bytebaseServerlessSpecArgs

func bytebaseServerlessSpecPtr(v *bytebaseServerlessSpecArgs) bytebaseServerlessSpecPtrInput {
	return (*bytebaseServerlessSpecPtrType)(v)
}

func (*bytebaseServerlessSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**bytebaseServerlessSpec)(nil)).Elem()
}

func (i *bytebaseServerlessSpecPtrType) TobytebaseServerlessSpecPtrOutput() bytebaseServerlessSpecPtrOutput {
	return i.TobytebaseServerlessSpecPtrOutputWithContext(context.Background())
}

func (i *bytebaseServerlessSpecPtrType) TobytebaseServerlessSpecPtrOutputWithContext(ctx context.Context) bytebaseServerlessSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(bytebaseServerlessSpecPtrOutput)
}

type bytebaseServerlessSpecOutput struct{ *pulumi.OutputState }

func (bytebaseServerlessSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*bytebaseServerlessSpec)(nil)).Elem()
}

func (o bytebaseServerlessSpecOutput) TobytebaseServerlessSpecOutput() bytebaseServerlessSpecOutput {
	return o
}

func (o bytebaseServerlessSpecOutput) TobytebaseServerlessSpecOutputWithContext(ctx context.Context) bytebaseServerlessSpecOutput {
	return o
}

func (o bytebaseServerlessSpecOutput) TobytebaseServerlessSpecPtrOutput() bytebaseServerlessSpecPtrOutput {
	return o.TobytebaseServerlessSpecPtrOutputWithContext(context.Background())
}

func (o bytebaseServerlessSpecOutput) TobytebaseServerlessSpecPtrOutputWithContext(ctx context.Context) bytebaseServerlessSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v bytebaseServerlessSpec) *bytebaseServerlessSpec {
		return &v
	}).(bytebaseServerlessSpecPtrOutput)
}

// The public cloud where you would like your index hosted.
func (o bytebaseServerlessSpecOutput) Cloud() ServerlessSpecCloudOutput {
	return o.ApplyT(func(v bytebaseServerlessSpec) ServerlessSpecCloud { return v.Cloud }).(ServerlessSpecCloudOutput)
}

// The region where you would like your index to be created. Different cloud providers have different regions available.
func (o bytebaseServerlessSpecOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v bytebaseServerlessSpec) string { return v.Region }).(pulumi.StringOutput)
}

type bytebaseServerlessSpecPtrOutput struct{ *pulumi.OutputState }

func (bytebaseServerlessSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**bytebaseServerlessSpec)(nil)).Elem()
}

func (o bytebaseServerlessSpecPtrOutput) TobytebaseServerlessSpecPtrOutput() bytebaseServerlessSpecPtrOutput {
	return o
}

func (o bytebaseServerlessSpecPtrOutput) TobytebaseServerlessSpecPtrOutputWithContext(ctx context.Context) bytebaseServerlessSpecPtrOutput {
	return o
}

func (o bytebaseServerlessSpecPtrOutput) Elem() bytebaseServerlessSpecOutput {
	return o.ApplyT(func(v *bytebaseServerlessSpec) bytebaseServerlessSpec {
		if v != nil {
			return *v
		}
		var ret bytebaseServerlessSpec
		return ret
	}).(bytebaseServerlessSpecOutput)
}

// The public cloud where you would like your index hosted.
func (o bytebaseServerlessSpecPtrOutput) Cloud() ServerlessSpecCloudPtrOutput {
	return o.ApplyT(func(v *bytebaseServerlessSpec) *ServerlessSpecCloud {
		if v == nil {
			return nil
		}
		return &v.Cloud
	}).(ServerlessSpecCloudPtrOutput)
}

// The region where you would like your index to be created. Different cloud providers have different regions available.
func (o bytebaseServerlessSpecPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *bytebaseServerlessSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

type bytebaseSpec struct {
	// Configuration needed to deploy a pod index.
	Pod *bytebasePodSpec `pulumi:"pod"`
	// Configuration needed to deploy a serverless index.
	Serverless *bytebaseServerlessSpec `pulumi:"serverless"`
}

// bytebaseSpecInput is an input type that accepts bytebaseSpecArgs and bytebaseSpecOutput values.
// You can construct a concrete instance of `bytebaseSpecInput` via:
//
//	bytebaseSpecArgs{...}
type bytebaseSpecInput interface {
	pulumi.Input

	TobytebaseSpecOutput() bytebaseSpecOutput
	TobytebaseSpecOutputWithContext(context.Context) bytebaseSpecOutput
}

type bytebaseSpecArgs struct {
	// Configuration needed to deploy a pod index.
	Pod bytebasePodSpecPtrInput `pulumi:"pod"`
	// Configuration needed to deploy a serverless index.
	Serverless bytebaseServerlessSpecPtrInput `pulumi:"serverless"`
}

func (bytebaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bytebaseSpec)(nil)).Elem()
}

func (i bytebaseSpecArgs) TobytebaseSpecOutput() bytebaseSpecOutput {
	return i.TobytebaseSpecOutputWithContext(context.Background())
}

func (i bytebaseSpecArgs) TobytebaseSpecOutputWithContext(ctx context.Context) bytebaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(bytebaseSpecOutput)
}

type bytebaseSpecOutput struct{ *pulumi.OutputState }

func (bytebaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*bytebaseSpec)(nil)).Elem()
}

func (o bytebaseSpecOutput) TobytebaseSpecOutput() bytebaseSpecOutput {
	return o
}

func (o bytebaseSpecOutput) TobytebaseSpecOutputWithContext(ctx context.Context) bytebaseSpecOutput {
	return o
}

// Configuration needed to deploy a pod index.
func (o bytebaseSpecOutput) Pod() bytebasePodSpecPtrOutput {
	return o.ApplyT(func(v bytebaseSpec) *bytebasePodSpec { return v.Pod }).(bytebasePodSpecPtrOutput)
}

// Configuration needed to deploy a serverless index.
func (o bytebaseSpecOutput) Serverless() bytebaseServerlessSpecPtrOutput {
	return o.ApplyT(func(v bytebaseSpec) *bytebaseServerlessSpec { return v.Serverless }).(bytebaseServerlessSpecPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetaDataConfigInput)(nil)).Elem(), MetaDataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetaDataConfigPtrInput)(nil)).Elem(), MetaDataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*bytebasePodSpecInput)(nil)).Elem(), bytebasePodSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*bytebasePodSpecPtrInput)(nil)).Elem(), bytebasePodSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*bytebaseServerlessSpecInput)(nil)).Elem(), bytebaseServerlessSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*bytebaseServerlessSpecPtrInput)(nil)).Elem(), bytebaseServerlessSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*bytebaseSpecInput)(nil)).Elem(), bytebaseSpecArgs{})
	pulumi.RegisterOutputType(MetaDataConfigOutput{})
	pulumi.RegisterOutputType(MetaDataConfigPtrOutput{})
	pulumi.RegisterOutputType(bytebasePodSpecOutput{})
	pulumi.RegisterOutputType(bytebasePodSpecPtrOutput{})
	pulumi.RegisterOutputType(bytebaseServerlessSpecOutput{})
	pulumi.RegisterOutputType(bytebaseServerlessSpecPtrOutput{})
	pulumi.RegisterOutputType(bytebaseSpecOutput{})
}
